# AWSTemplateFormatVersion: '2010-09-09'
# Description: 
#   S3 and CloudFront for Static website hosting using OAI
# Mappings:
#   Vars:
#     Dev:
#       Name: "datagift"
#       ApiName: datagift-api
#       LambdaName: datagift-lambda
# Parameters:
#   EnvMode:
#     Type: String
#     Default: dev
#     AllowedValues: [test, dev, prod]
#     Description: Environment Mode(test|dev|prod)
# Resources:
#   DataGiftLambdaExecutionRole:
#     Type: 'AWS::IAM::Role'
#     Properties:
#       AssumeRolePolicyDocument:
#         Version: '2012-10-17'
#         Statement:
#           - Effect: Allow
#             Principal:
#               Service: lambda.amazonaws.com
#             Action: 'sts:AssumeRole'
#       ManagedPolicyArns:
#         - 'arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess'
#         - 'arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess'
#         - 'arn:aws:iam::aws:policy/service-role/AWSLambdaDynamoDBExecutionRole'
#         # TODO: make this policy minimal
#       MaxSessionDuration: 3600
#       Path: '/'
#       RoleName: DataGiftLambdaExecutionRole
# 
#   DataGiftLambda:
#     Type: AWS::Lambda::Function
#     Properties: 
#       Code:
#         ImageUri: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/datagift-api:latest'
#       Description: Lambda with image for API
#       FunctionName: !FindInMap ['Vars', 'Dev', 'LambdaName']
#       MemorySize: 128
#       PackageType: Image
#       Role: !GetAtt [DataGiftLambdaExecutionRole, Arn]
#       Timeout: 5
#       # DeadLetterConfig: 
#       #   DeadLetterConfig
#       Environment: 
#         Variables:
#           ENV_MODE: !Ref EnvMode
#       Tags:
#         - Key: CloudFormationArn
#           Value: !Sub '${AWS::StackName}'

AWSTemplateFormatVersion: 2010-09-09
Description: "API Gateway"
Mappings:
  Vars:
    Dev:
      FunctionName: datagift-lambda
Resources:
  Api:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: "datagift-restapi"
      Tags:
        - Key: CloudFormationArn
          Value: !Sub '${AWS::StackName}'
  ApiResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId: !Ref Api
      ParentId: !GetAtt Api.RootResourceId  
      PathPart: !FindInMap [Vars, Dev, FunctionName]
      # PathPart: !Sub "${FunctionName}"
  LambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !FindInMap [Vars, Dev, FunctionName]
      # FunctionName: !Sub "${FunctionName}"
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
  ApiResourceMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId: !Ref Api
      ResourceId: !Ref ApiResource
      AuthorizationType: "None"
      HttpMethod: 'ANY'
      Integration:
        Type: "AWS_PROXY"
        IntegrationHttpMethod: ANY
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${FunctionName}:Prod/invocations"
          - {FunctionName: !FindInMap [Vars, Dev, FunctionName] }
        # Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${FunctionName}/invocations"
    DependsOn: "LambdaPermission"
